#!/bin/bash
set -u
#set -e

USAGE="[-u <user>] [-r <repo>] [--ssl]"
LONG_USAGE="Note: The argument order does not matter.
Options:
    -u <user> Username of the repository
   --user <user>
    -r <repo> Name of the git repository
   --repo <repo>
    -i <repo> [<alias>]
              Initialize with git repository
              must pass in repository name
              optional to pass alias directory
   --init <repo> [<alias>]
   --git      Use git connection
    -c <repo> [<alias>]
              Clone git repository
              must pass in repository name
              optional to pass alias directory
   --clone <repo> [<alias>]
   --git      Use git connection
   --ssl      Use https connection (default is git)

Config: Use 'remote.conf' to configure variables.
        Keep in mind using argument options 
        will override the configuration variables.
"

show_help() {
  echo "Add multiple remotes(servers) for the same repository <repo>."
  echo ""
  echo "Usage: git multi-remote $USAGE"
  echo ""
  echo "$LONG_USAGE"
  exit 0
}

# Show the help message right away
if [ $# -ne 0 ]; then
  case "$1" in
    -h|--h|--help)
      show_help
      ;;
  esac
fi

# Add Multiple Repository Server Script
# usage: git multi-remote -u <username> -r <repository>

# Get the script directory to find the config file
BIN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
DIR="$( cd "$( dirname "${BIN}" )" >/dev/null 2>&1 && pwd )"

# Connection to the url address
declare -A URL
URL=(
  [CON]=""
  [AND]=""
)

# Comment out the repository servers you do not have with the '#' character
declare -A REMOTES     # Explicitly declare key value array
REMOTES=(
  [gh]=github.com
)
# Store the remote urls
declare -A RURLS
# Reserve booleans to check if remotes have been already added
declare -A STATUS

# Use the remote.conf file to setup configuration
declare -A CONFIG
CONFIG=(
  [SSL]=false
  [USER]=""
  [REPO]=""
)

# Set the main origin remote
GIT_CLONE=false
GIT_INIT=false
GIT_DIR=false
GIT_ALIAS=""
ORIGIN="${REMOTES[gh]}"

# Build the remote url
build_remote_url() {
  url=""
  case "$1" in
    visualstudio.com)
      # https://albertpark.visualstudio.com/multi-remote/_git/multi-remote
      # vs-ssh.visualstudio.com:v3/albertpark/multi-remote/multi-remote
      if [ "${CONFIG[SSL]}" = true ]; then
        url="${URL[CON]}${CONFIG[USER]}.$1${URL[AND]}${CONFIG[REPO]}${URL[AND]}_git${URL[AND]}${CONFIG[REPO]}"
      else
        url="vs-ssh.$1${URL[AND]}v3/${CONFIG[USER]}/${CONFIG[REPO]}/${CONFIG[REPO]}"
      fi
      ;;
      
    bitbucket.org|github.com|gitlab.com)
      url="${URL[CON]}$1${URL[AND]}${CONFIG[USER]}/${CONFIG[REPO]}.git"
      ;;
  esac

  echo $url
}

# Check if current directory is a git repository
check_git() {
  if [ "$GIT_CLONE" = true ]; then
    clone_dir
  fi

  if [ "$GIT_INIT" = true ]; then
    init_dir
  fi

  if [ ! -d .git ]; then
    echo "fatal: Not a git repository"
    #git rev-parse --git-dir 2> /dev/null
    exit -1
  fi
}

# Functions need to be set before getting called
check_ssl() {
  if [ "${CONFIG[SSL]}" = true ]; then
    URL[CON]="https://"
    URL[AND]="/"
  else
    URL[CON]="git@"
    URL[AND]=":"
  fi
}

check_variables() {
  if [ -z "${CONFIG[USER]}" ]; then
    echo "fatal: username is empty. use -u <user>"
    exit 0
  fi

  if [ -z "${CONFIG[REPO]}" ] && [ "$GIT_DIR" = true ]; then
    dir=$(fetch_git_directory)
    set_repository "$dir"
    echo "multi-remote: using '$dir' as default repository"
  fi

  if [ -z "${CONFIG[REPO]}" ]; then
    echo "fatal: repository is empty. use -r <repo>"
    exit 0
  fi
}

clone_dir() {
  clone="git clone $ORIGIN $GIT_ALIAS"
  # Make sure we do not get a failure otherwise stop
  output=`$clone 2>&1`
  echo "$output"
  if [[ "$output" == *"fatal"* ]]; then
    exit -1
  fi

  # If navigation fails halt
  change="cd $GIT_ALIAS"
  result=`$change 2>&1`
  $change
  if [[ $result == *"No such"* ]]; then
    echo "multi-remote: No such directory for '$GIT_ALIAS'"
    exit -1
  fi
}

fetch_git_directory() {
  IFS='/'
   # Read pwd into an array as tokens separated by IFS
  read -ra FULLPATH <<< "$PWD"
  # Reset to default value after usage
  IFS=' '

  # Get the last index to get the current directory
  last=$((${#FULLPATH[@]}-1))
  repo="${FULLPATH[$last]}"

  echo $repo
}

init_config() {
  # while IFS= read -r line;
  while read line
  do
    if echo $line | grep -F = &>/dev/null; then
      # Skip comments lines using regular experssion with wildcards in double brackets
      if [[ $line =~ ^# ]]; then continue; fi

      # Get the main configuration variable
      conf=$(echo "$line" | cut -d '=' -f 1)
      # Identify the identifier and key
      var=$(echo "$conf" | cut -d '.' -f 1)
      key=$(echo "$conf" | cut -d '.' -f 2-)
      # Fetch the value
      val=$(echo "$line" | cut -d '=' -f 2-)

      #echo "$var [ ${key^^} ] = $val"

      # Skip unassigned variables
      if [ -z $val ]; then continue; fi

      # Assign the configurations
      case "$var" in
        REMOTES)
          # the space after the colon is required to get the last character
          asterisk="${val: -1}"
          if [ "$asterisk" = "*" ]; then
            # reassign the val and set the origin
            val="${val%?}"
            ORIGIN=$val
            echo "multi-remote: using '$val' as the origin remote"
          fi

          REMOTES[$key]=$val
          STATUS[$key]=true
          ;;

        CONFIG)
          if [ $key = "ssl" ]; then
            CONFIG[${key^^}]=$val
          elif [ $key = "repo" ] && [ $val = "GIT_DIR" ]; then
            GIT_DIR=true
          else
            CONFIG[${key^^}]=$(echo "$val")
          fi
          ;;
      esac
    fi
  done < "$DIR/remote.conf"
}

init_dir() {
  init="git init $GIT_ALIAS"
  # Make sure we do not get a failure otherwise stop
  output=`$init 2>&1`
  echo "$output"
  if [[ "$output" == *"fatal"* ]]; then
    exit -1
  fi

  # If navigation fails halt
  change="cd $GIT_ALIAS"
  result=`$change 2>&1`
  # Navigate to it
  $change
  if [[ $result == *"No such"* ]]; then
    echo "multi-remote: No such directory for '$GIT_ALIAS'"
    exit -1
  fi
}

main() {
  # Loop to fetch all the commands
  while case "$#" in 0) break ;; esac
  do
    # echo "Looping: $1"
    # echo "value: $2"
    case "$1" in
      -c|--c|--clone)
        shift
        set_repository "$1"
        GIT_CLONE=true
        # Check for alias directory name
        if [ -n "${2-}" ] && [ `echo $2 | cut -c1-1` != "-" ]; then
          shift
        fi
        set_alias_dir "$1"
        ;;

      -i|--i|--init)
        shift
        set_repository "$1"
        GIT_INIT=true
        # Check for alias directory name
        if [ -n "${2-}" ] && [ `echo $2 | cut -c1-1` != "-" ]; then
          shift
        fi
        set_alias_dir "$1"
        ;;

      -r|--r|--repo)
        shift
        set_repository "$1"
        ;;

      -u|--u|--user)
        shift
        set_username "$1"
        ;;

      -g|-git|--git)
        CONFIG[SSL]=false
        ;;

      -s|-ssl|--ssl)
        CONFIG[SSL]=true
        ;;

      -*)
        break
        ;;

      *)
        break
        ;;
    esac
    # get the next variable
    shift
  done
}

new_fetch() {
  if [ "$GIT_INIT" = true ]; then
    echo ""
    echo "fetching origin ..."
    fetch="git fetch origin"
    $fetch

    checkout="git checkout master"
    $checkout
  fi
}

store_remote_urls() {
  # Build one for the origin
  url=$(build_remote_url $ORIGIN)
  ORIGIN=$url

  for i in "${!REMOTES[@]}"
  do
    key=$i
    url=$(build_remote_url ${REMOTES[$i]})
    RURLS[$i]=$url
  done
}

remote_origin() {
  if [ "$GIT_CLONE" = false ]; then
    echo "multi-remote: adding multiple remotes for '${CONFIG[REPO]}' ..."
    echo ""
    main="git remote add origin $ORIGIN"
    echo "$main"
    $main
  fi
}

remote_add() {
  for i in "${!RURLS[@]}"
  do
    key=$i
    url=${RURLS[$i]}
    add_repo="git remote add $key $url"

    $add_repo
    # Fetch the output result 0 means the remote was added successfully
    result=$?
    # Make sure we do not get a failure otherwise skip adding the remote set-url
    if [[ $result -ne 0 ]]; then
      STATUS[$i]=false
    fi
    # When the remote was added successful display the command
    if [[ $result -eq 0 ]]; then
      echo "$add_repo"
    fi
  done
}

remote_seturl() {
  for i in "${!RURLS[@]}"
  do
    if [ "${STATUS[$i]}" = true ]; then
      set_url="git remote set-url --add --push origin ${RURLS[$i]}"
      echo "$set_url"
      $set_url
    fi
  done
}

set_alias_dir() {
  if [ ! -z "$1" ]; then
    GIT_ALIAS="$1"
  fi
}

set_repository() {
  CONFIG[REPO]="$1"
}

set_username() {
  CONFIG[USER]="$1"
}

show_origin() {
  show="git remote show origin"
  echo ""
  echo "$show"
  $show
}

#################################
#     MAIN CODE STARTS HERE     #
#################################

# Load the configuration
init_config

# Options passed in the arguments will override the configuration
main "$@"

# Setup the connection
check_ssl

# Make sure to check the connection first
check_variables

# Construct all the remote urls from the loaded config or options
store_remote_urls

# Check if the directory has a .git folder
check_git

# After checking all the requirements start the git remote process
remote_origin

remote_add

remote_seturl

show_origin

new_fetch

exit 0